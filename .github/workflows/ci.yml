# .github/workflows/ci-cd-pipeline.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: inventory-app:${{ github.sha }}
  REPORTS_DIR: reports

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.set_output.outputs.docker_image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }} -o image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

      - name: Set output variable
        id: set_output
        run: echo "docker_image=${{ env.DOCKER_IMAGE }}" >> $GITHUB_OUTPUT

  sast:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        tool: [bandit, semgrep]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.REPORTS_DIR }}

      - name: Bandit SAST Scan
        if: matrix.tool == 'bandit'
        run: |
          pip install bandit
          mkdir -p ${{ env.REPORTS_DIR }}/bandit
          bandit -r . -f json -o ${{ env.REPORTS_DIR }}/bandit/report.json || true
          bandit -r . -f html -o ${{ env.REPORTS_DIR }}/bandit/report.html || true
        continue-on-error: true

      - name: Semgrep SAST Scan
        if: matrix.tool == 'semgrep'
        run: |
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep --config auto . --json --output ${{ env.REPORTS_DIR }}/semgrep/report.json
        continue-on-error: true

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports-${{ matrix.tool }}
          path: ${{ env.REPORTS_DIR }}/
          retention-days: 7

  sca:
    name: SCA Dependency Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Snyk
        run: |
          npm install -g snyk snyk-to-html

      - name: Snyk SCA Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Analizar dependencias de Python
          if [ -f "requirements.txt" ]; then
            snyk test --file=requirements.txt --package-manager=pip --json > snyk_python_results.json || true
            snyk-to-html -i snyk_python_results.json -o snyk_python_results.html || true
          fi

          # Analizar dependencias de Node.js (si existe package.json)
          if [ -f "package.json" ]; then
            snyk test --file=package.json --package-manager=npm --json > snyk_node_results.json || true
            snyk-to-html -i snyk_node_results.json -o snyk_node_results.html || true
          fi

          # Analizar contenedor Docker
          snyk container test ${{ needs.build.outputs.docker_image }} --json > snyk_container_results.json || true
          snyk-to-html -i snyk_container_results.json -o snyk_container_results.html || true
        continue-on-error: true

      - name: Upload SCA reports
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: |
            snyk_*_results.json
            snyk_*_results.html
          retention-days: 7

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, sast, sca]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Tag and Push Docker image
        run: |
          docker load -i image.tar
          docker tag ${{ needs.build.outputs.docker_image }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.build.outputs.docker_image }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.build.outputs.docker_image }}

      - name: Update output variable
        run: echo "docker_image=${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.build.outputs.docker_image }}" >> $GITHUB_ENV

  dast:
    name: DAST Security Scan
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        tool: [trivy, zap]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.REPORTS_DIR }}

      - name: Trivy DAST Scan
        if: matrix.tool == 'trivy'
        run: |
          # Instalar Trivy
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.49.1_Linux-64bit.tar.gz
          tar -xzf trivy_0.49.1_Linux-64bit.tar.gz
          
          mkdir -p "${{ env.REPORTS_DIR }}/trivy"
          ./trivy image --severity "CRITICAL,HIGH" --format json --output "${{ env.REPORTS_DIR }}/trivy/report.json" ${{ needs.push.outputs.docker_image }}
        continue-on-error: true

      - name: ZAP DAST Scan
        if: matrix.tool == 'zap'
        env:
          ZAP_TARGET: http://localhost:5000
        run: |
          mkdir -p ${{ env.REPORTS_DIR }}/zap
          
          # Crear red y ejecutar aplicaci√≥n
          docker network create zap-net || true
          docker run -d --name webapp --network zap-net -p 5000:5000 ${{ needs.push.outputs.docker_image }}
          
          # Esperar a que la aplicaci√≥n est√© lista
          echo "Waiting for application to start..."
          timeout 180 bash -c 'until curl -s $ZAP_TARGET >/dev/null; do sleep 10; docker logs webapp; done' || true
          
          # Ejecutar escaneo ZAP
          docker run --rm --network zap-net -v "$(pwd)/${{ env.REPORTS_DIR }}/zap:/zap/wrk" zaproxy/zap-stable zap-baseline.py -t "$ZAP_TARGET" -J report.json -r report.html -I
          
          # Limpiar contenedores
          docker stop webapp || true
          docker rm webapp || true
        continue-on-error: true

      - name: Upload DAST reports
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports-${{ matrix.tool }}
          path: ${{ env.REPORTS_DIR }}/
          retention-days: 7

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [push, dast]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" > ~/.kube/config
          chmod 600 ~/.kube/config
          
          # Verificar conexi√≥n con Kubernetes
          kubectl cluster-info
          
          # Aplicar deployment
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: inventory-app
            labels:
              app: inventory
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: inventory
            template:
              metadata:
                labels:
                  app: inventory
              spec:
                securityContext:
                  runAsNonRoot: true
                  readOnlyRootFilesystem: true
                containers:
                - name: inventory
                  image: ${{ needs.push.outputs.docker_image }}
                  ports:
                  - containerPort: 5000
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: ["ALL"]
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
                    limits:
                      cpu: "200m"
                      memory: "256Mi"
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 5000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 5000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: inventory-service
            labels:
              app: inventory
          spec:
            selector:
              app: inventory
            ports:
            - port: 80
              targetPort: 5000
            type: LoadBalancer
          EOF

      - name: Verify deployment
        run: |
          kubectl get deployments
          kubectl get pods
          kubectl get services

  security_summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    if: always()
    steps:
      - name: Generate Security Summary
        run: |
          echo "üìä Security Scan Summary"
          echo "========================="
          echo "SAST Scans: COMPLETED"
          echo "SCA Scans: COMPLETED" 
          echo "DAST Scans: COMPLETED"
          echo ""
          echo "Reports available in Artifacts section"
        continue-on-error: true