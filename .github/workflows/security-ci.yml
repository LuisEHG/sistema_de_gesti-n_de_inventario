# .github/workflows/build.yml
name: Build Docker Image

on:
  push

env:
  CONTAINER_REGISTRY: docker.io
  IMAGE_NAME: app
  REPORTS_DIR: security_reports
  TRIVY_SEVERITY: CRITICAL,HIGH
  TRIVY_NO_PROGRESS: "true"

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout c√≥digo
#         uses: actions/checkout@v4

#       - name: Docker login
#         run: |
#           echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login \
#             ${{ env.CONTAINER_REGISTRY }} \
#             -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

#       - name: Docker build
#         run: |
#           IMAGE=${{ env.CONTAINER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
#           echo "Building $IMAGE"
#           docker build -t $IMAGE .
#           docker save $IMAGE -o image.tar

#       - name: Upload Docker image artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image
#           path: image.tar

     
jobs:
  ci-build-push:
    uses: ./.github/workflows/build.yml
    with:
      image_name: ${{ env.IMAGE_NAME }}
      container_registry: ${{ env.CONTAINER_REGISTRY }}

  sast_review:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Crear directorios de reportes ---
      - name: Create reports directories
        run: |
          mkdir -p ./reports/bandit
          mkdir -p ./reports/semgrep

      # --- Escaneo con Bandit (SAST para Python) ---
      - name: Run Bandit Scan
        uses: docker://python:3.10
        with:
          args: sh -c "pip install bandit && bandit -r . -f json -o ./reports/bandit/report.json || true && bandit -r . -f html -o ./reports/bandit/report.html || true"
        continue-on-error: true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: ./reports/bandit/
          retention-days: 7

      # --- Escaneo con Semgrep (SAST General)
      - name: Run Semgrep Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
        continue-on-error: true
      
      # Alternativamente, si quieres usar Docker directamente:
      - name: Run Semgrep Scan (Docker)
        run: |
          docker run --rm -v "${{ github.workspace }}:/src" returntocorp/semgrep \
            semgrep --config=auto /src --json --output=/src/reports/semgrep/report.json || true
          docker run --rm -v "${{ github.workspace }}:/src" returntocorp/semgrep \
            semgrep --config=auto /src --text --output=/src/reports/semgrep/report.txt || true
        continue-on-error: true
      
      - name: Upload Semgrep Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: ./reports/semgrep/
          retention-days: 7
        if: always()

  sca_review:
    needs: sast_review
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python and Node.js
        run: |
          # Update package manager
          sudo apt-get update
          
          # Install Node.js and npm
          sudo apt-get install -y nodejs npm
          
          # Install Python pip
          sudo apt-get install -y python3-pip

      - name: Install Snyk tools
        run: |
          npm install snyk -g
          npm install snyk-to-html -g

      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip3 install -r requirements.txt
          else
            echo "No requirements.txt found"
          fi

      - name: Run Snyk tests
        run: |
          snyk test --command=python3 --json | snyk-to-html -o results-opensource.html || true
          snyk code test --command=python3 --json | snyk-to-html -o results-code.html || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: "results-*.html"
          retention-days: 30
        if: always()
  trivy_scan:
    needs: sca_review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Docker load
        run: docker load -i image.tar

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y wget tar curl

      - name: Install Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz | tar -xz
          sudo mv trivy /usr/local/bin/trivy
          trivy --version

      - name: Run Trivy scan
        run: |
          mkdir -p "$REPORTS_DIR/trivy"
          IMAGE=${{ env.CONTAINER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          trivy image --severity "$TRIVY_SEVERITY" --format json --output "$REPORTS_DIR/trivy/report.json" "$IMAGE"
        continue-on-error: true

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: ${{ env.REPORTS_DIR }}/trivy
          retention-days: 7
          
  # push_image:
  #    needs: trivy_scan
  #    runs-on: ubuntu-latest
  #    steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: docker-image
  #         path: .

  #     - name: Docker load
  #       run: docker load -i image.tar

  #     - name: Docker login
  #       run: |
  #         echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login \
  #           ${{ env.CONTAINER_REGISTRY }} \
  #           -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

  #     - name: Docker push
  #       run: |
  #         IMAGE=${{ env.CONTAINER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
  #         echo "Pushing $IMAGE"
  #         docker push $IMAGE